Ext.override(Ext.grid.RowNumberer, {	renderer: function(value, metaData, record, rowIdx, colIdx, store) {		if (store.indexOfTotal)			return store.indexOfTotal(record) + 1;		else if (store.store.IndexOfTotal)			return store.indexOfTotal(record) + 1;		else			return rowIdx + 1;	}});Ext.namespace('Ext.renderer');Ext.renderer.formatDate = function(value, meta, record, rowIndex, colIndex, stor) {	var dt = '&nbsp;';	if (!Ext.isEmpty(value)) {		v = new Date(value);		if (Ext.isDate(v)) dt = Ext.Date.format(v, 'd/m/Y');	}	return '<div style="background-color:#88D9FF;margin:-5px; padding:5px;">' + dt + '</div>';}Ext.renderer.masaKerja = function(value, meta, record, rowIndex, colIndex, store) {	var stringTahun = '';	var stringBulan = '';	if (record.data.Th != '' && record.data.Th != null) {		var stringTahun = record.data.Th + ' thn ';	}	if (record.data.Bl != '' && record.data.Bl != null) {		var stringBulan = record.data.Bl + ' bln ';	}	return stringTahun + stringBulan;}Ext.renderer.formatNominal = function(value, meta, record, rowIndex, colIndex, store) {	if (value != '' && value != null) {		var gaji = new String(value);		var result = '';		len = gaji.length;		for (var i = len - 1; i >= 0; i--) {			if ((i + 1) % 3 == 0 && i + 1 != len) result += ".";			result += gaji.charAt(len - 1 - i);		}		return result;	} else {		return value;	}}Ext.renderer.formatAngka = function(value, meta, record, rowIndex, colIndex, store) {	if (value != '' && value != null) {		var angka = new String(value);		var result = '';		len = angka.length;		for (var i = 0; i < len; i++) {			if (angka.charAt(i - 3) == '.') break;			result += angka.charAt(i);		}		return result;	} else {		return value;	}}Ext.renderer.eselon = function(value, meta, record, rowIndex, colIndex, store) {	if (value == 11)		return 'I.a';	else if (value == 12)		return 'I.b';	else if (value == 21)		return 'II.a';	else if (value == 22)		return 'II.b';	else if (value == 31)		return 'III.a';	else if (value == 32)		return 'III.b';	else if (value == 41)		return 'IV.a';	else if (value == 42)		return 'IV.b';	else if (value == 51)		return 'V.a';}Ext.renderer.tingkatpendidikan = function(value, meta, record, rowIndex, colIndex, store) {	if (value == '01')		return 'SD';	else if (value == '02')		return 'SLTP';	else if (value == '03')		return 'SLTA';	else if (value == '04')		return 'D.I';	else if (value == '05')		return 'D.II';	else if (value == '06')		return 'D.III';	else if (value == '07')		return 'D.IV';	else if (value == '08')		return 'S1';	else if (value == '09')		return 'S2';	else if (value == '10')		return 'S3';	else if (value == '11')		return 'NONE';}Ext.renderer.itemjabatan = function(value, meta, record, rowIndex, colIndex, store) {	if (value == "1")		return 'Pengelompokan';	else if (value == "2")		return 'Item Jabatan';}if (Ext.grid.RowEditor) {	Ext.apply(Ext.grid.RowEditor.prototype, {		saveBtnText: 'Simpan',		cancelBtnText: 'Batal',		errorsText: 'Pesan',		dirtyText: 'Kamu harus menyimpan atau membatalkan perubahan data'	});}/** * this function is created for get value in object property by property string */Object.byString = function(o, s) {	s = s.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties	s = s.replace(/^\./, ''); // strip leading dot	var a = s.split('.');	while (a.length) {		var n = a.shift();		if (n in o) {			o = o[n];		} else {			return;		}	}	return o;}tp_helper = {	hitungBulan: function(d1, d2) {		/* params d1 d2 adalah type data date di js */		var months;		months = (d2.getFullYear() - d1.getFullYear()) * 12;		months -= d1.getMonth() + 1;		months += d2.getMonth() + 1;		return months <= 0 ? 0 : months;	},	strtolower: function(v) {		return (v + '').toLowerCase();	},	wrap_text: function(v) {		if (v === null) {			v = '<center>-</center>';		}		return '<div style="white-space:normal !important;">' + v + '</div>';	},	ucwords: function(str) {		return (str + '').replace(/^([a-z\u00E0-\u00FC])|\s+([a-z\u00E0-\u00FC])/g, function($1) {			return $1.toUpperCase();		});	},	dmyToDate: function(v) {		//v format is '18/03/2016'		split = v.split('/');		today = new Date(split[2] + '-' + split[1] + '-' + split[0]);		return today;	}};